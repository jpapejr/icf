---
- name: multi-az-cluster-on-vpc2-compute
  hosts: localhost
  gather_facts: no
  tasks:
    - name: ibmcloud_login
      shell: ibmcloud login -r {{ lookup('env','region') }} -u jtpape@us.ibm.com -c "{{ lookup('env','account_id') }}" -d default --apikey {{ lookup('env','ibmcloud_api_key') }}
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/ic-login.out"
      register: auth_out
    - copy: content="{{ auth_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/ic-login.out"
    - name: target_vpc2
      shell: ibmcloud is target --gen 2
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-target.out"
      register: target_out
    - copy: content="{{ target_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-target.out"
    - name: create_vpc
      shell: ibmcloud is vpc-create vpc-{{ lookup('env', 'petname') }} --address-prefix-management manual --json
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-vpc-create.out"
      register: vpc_out
    - copy: content="{{ vpc_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-vpc-create.out"
    - name: get_vpc_id
      shell: ibmcloud is vpcs | grep vpc-{{ lookup('env', 'petname') }} | awk '/.*/ { print $1}'
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-vpc-id.out"
      register: vpc_id
    - copy: content="{{ vpc_id }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-vpc-id.out"
    - name: update_vpc_default_sg
      shell: ibmcloud is sgu $(ibmcloud is sgs | grep $(ibmcloud is vpcs | grep vpc-{{ lookup('env', 'petname') }} | awk '/.*/ { print $6}') | awk '/.*/ {print $1}') --name vpc-{{ lookup('env', 'petname') }}-default 
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-update-sg.out"
      register: update_sg
    - copy: content="{{ update_sg }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-update-sg.out"
    - name: update_vpc_default_nwacl
      shell: ibmcloud is nwaclu $(ibmcloud is nwacls | grep $(ibmcloud is vpcs | grep vpc-{{ lookup('env', 'petname') }} | awk '/.*/ { print $5}') | awk '/.*/ {print $1}') --name vpc-{{ lookup('env', 'petname') }}-default 
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-update-nwacl.out"
      register: update_nwacl
    - copy: content="{{ update_nwacl }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-update-nwacl.out"
    - name: update_default_sg_for_iks
      shell: ibmcloud is security-group-rule-add $(ibmcloud is sgs | grep $(ibmcloud is vpcs | grep vpc-{{ lookup('env', 'petname') }} | awk '/.*/ { print $6}') | awk '/.*/ {print $1}') inbound tcp --port-min 30000 --port-max 32767
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-sg-add.out"
      register: add_iks_rule_out
    - copy: content="{{ add_iks_rule_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-sg-add.out"
    - name: create_prefix1
      shell: ibmcloud is vpc-address-prefix-create prefix1 {{ vpc_id.stdout }} {{ lookup('env', 'region') }}-1 {{ lookup('env', 'prefix1') }}/18 
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-prefix1.out"
      register: prefix1_out
    - copy: content="{{ prefix1_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-prefix1.out"
    - name: create_prefix2
      shell: ibmcloud is vpc-address-prefix-create prefix2 {{ vpc_id.stdout }} {{ lookup('env', 'region') }}-2 {{ lookup('env', 'prefix2') }}/18
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-prefix2.out"
      register: prefix2_out
    - copy: content="{{ prefix2_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-prefix2.out"
    - name: create_prefix3
      shell: ibmcloud is vpc-address-prefix-create prefix3 {{ vpc_id.stdout }} {{ lookup('env', 'region') }}-3 {{ lookup('env', 'prefix3') }}/18
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-prefix3.out"
      register: prefix3_out
    - copy: content="{{ prefix3_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-prefix3.out"
    - name: create_subnet1_pgw
      shell: ibmcloud is public-gateway-create vpc-{{ lookup('env', 'petname') }}-subnet1-pgw {{ vpc_id.stdout }}  {{ lookup('env', 'region') }}-1
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-pgw1.out"
      register: pgw1_out
    - copy: content="{{ pgw1_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-pgw1.out"
    - name: create_subnet2_pgw
      shell: ibmcloud is public-gateway-create vpc-{{ lookup('env', 'petname') }}-subnet2-pgw {{ vpc_id.stdout }}  {{ lookup('env', 'region') }}-2
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-pgw2.out"
      register: pgw2_out
    - copy: content="{{ pgw2_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-pgw2.out"
    - name: create_subnet1
      shell: ibmcloud is subnet-create vpc-{{ lookup('env', 'petname') }}-subnet1  {{ vpc_id.stdout }} --zone {{ lookup('env', 'region') }}-1 --public-gateway-id $(ibmcloud is public-gateways | grep vpc-{{ lookup('env', 'petname') }}-subnet1-pgw | awk '/.*/ {print $1}') --ipv4-cidr-block {{ lookup('env', 'prefix1') }}/24
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-subnet1.out"
      register: subnet1_out
    - copy: content="{{ subnet1_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-subnet1.out"
    - name: create_subnet2
      shell: ibmcloud is subnet-create vpc-{{ lookup('env', 'petname') }}-subnet2  {{ vpc_id.stdout }} --zone {{ lookup('env', 'region') }}-2 --public-gateway-id $(ibmcloud is public-gateways | grep vpc-{{ lookup('env', 'petname') }}-subnet2-pgw | awk '/.*/ {print $1}') --ipv4-cidr-block {{ lookup('env', 'prefix2') }}/24
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/is-subnet2.out"
      register: subnet2_out
    - copy: content="{{ subnet2_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-subnet2.out"
    - name: create_cluster
      shell: ibmcloud ks cluster create vpc-gen2 --name {{ lookup('env', 'petname') }} --zone {{ lookup('env', 'region') }}-1 --vpc-id {{ vpc_id.stdout }} --subnet-id $(ibmcloud is subnets | grep vpc-{{ lookup('env', 'petname') }}-subnet1 | awk '/.*/ {print $1}') --flavor {{ lookup('env', 'flavor') }} --workers  {{ lookup('env', 'workers') }} --version  {{ lookup('env', 'version') }}  {{ lookup('env', 'extra_cluster_flags') }}
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/ks-cluster.out"
      register: cluster_out
    - copy: content="{{ cluster_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/ks-cluster.out"
    - name: attach_zone2
      shell: ibmcloud ks zone add vpc-gen2 --cluster {{ lookup('env', 'petname') }} --subnet-id $(ibmcloud is subnets | grep vpc-{{ lookup('env', 'petname') }}-subnet2 | awk '/.*/ {print $1}') --zone {{ lookup('env', 'region') }}-2 --worker-pool default
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/ks-zoneadd.out"
      register: zone_add_out
    - copy: content="{{ zone_add_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/is-zoneadd.out"
    - name: wait_for_cluster_ready
      when: cluster_out is succeeded
      shell: while [ "$(ibmcloud ks cluster get -c {{ lookup('env', 'petname') }} --json | jq ".state" | sed -e 's/^"//' -e 's/"$//')" != "normal" ]; do printf . && sleep 60; done
      args:
        creates: "./{{ lookup('env','CONFIG_FILE') }}/ks-clusterwait.out"
      register: cluster_wait_out
    - copy: content="{{ cluster_wait_out }}" dest="./{{ lookup('env','CONFIG_FILE') }}/ks-clusterwait.out"
